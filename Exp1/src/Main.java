import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;
import java.util.regex.Pattern;

public class Main {

    private static final String SENTENCE_BEGIN_BOUNDARY = "<s>";
    private static final String SENTENCE_END_BOUNDARY = "</s>";

    /**
     * Calls the method to read input file.
     * Calls the method to create language models.
     * Calls the method to generate emails.
     * Calls the method to calculate probability and perplexity of emails.
     *
     * @param args program arguments
     */
    public static void main(String[] args) {
        long startTime = System.nanoTime();

        if (args.length != 2) {
            System.out.println("Please specify one input file and one output file. Example execution is --> Java Main yourInputFile yourOutputFile");
            return;
        }

        String inputFile = args[0];
        String resultsFile = args[1];

        CsvReader reader = new CsvReader();
        FWriter fileWriter = new FWriter();

        Unigram unigram = new Unigram();
        Bigram bigram = new Bigram();
        Trigram trigram = new Trigram();

        List<String> sentences;
        List<String> endMarks = new ArrayList<>();

        try {
            endMarks = initializeSentenceEndingMarkList(endMarks);

            System.out.printf("Parsing Input File. This may take a while...%n%n");

            List<String> allTokens = reader.read(inputFile);

            if (allTokens == null) {
                System.out.println("Your input file is empty. Please use non-empty input file!!!");
                return;
            }
            sentences = addSentenceBoundary(allTokens, endMarks);

            List<String> emails = reader.getEmails();

            List<String> trainingSet = sentences.subList(0, sentences.size() * 6 / 10); // 60 percent
            List<String> testSet;

            if (reader.getFileExtension().equalsIgnoreCase("csv")) {
                testSet = emails.subList(emails.size() * 6 / 10, emails.size()); // 40 percent
            } else {
                testSet = sentences.subList(sentences.size() * 6 / 10, sentences.size()); // 40 percent
            }

            System.out.printf("Creating Language Models. This may take a while...%n%n");
            unigram.createUnigramModel(trainingSet);
            bigram.createBigramModel(trainingSet);
            trigram.createTrigramModel(trainingSet);

            fileWriter.openFile(resultsFile);
            fileWriter.write(String.format("----------------------------------------------- TASK-2 RESULTS ----------------------------------------------%n"));
            fileWriter.write(String.format("------------------------------------ PROBABILITY OF THE EACH EMAIL IN THE TEST SET  -------------------------%n"));

            System.out.printf("Generating Task - 2 Results. This may take a while...%n%n");

            for (int i = 0; i < testSet.size(); i++) {
                String email = testSet.get(i);
                fileWriter.write(String.format("%d-  ", i + 1));
                fileWriter.write(String.format("Probability of the email is:   %s%n%n", trigram.getProbabilityWithSmoothedTrigram(email)));
            }
            System.out.printf("Probability of each email is calculated. Execution continues.%n%n");

            fileWriter.write(String.format("----------------------------------------------- TASK-3 RESULTS ----------------------------------------------%n"));
            fileWriter.write(String.format("------------------------ EMAILS THAT ARE GENERATED BY USING UNSMOOTHED UNIGRAM MODEL  -----------------------%n%n"));

            System.out.printf("Generating Task - 3 Results. This may take a while...%n%n");
            for (int i = 0; i < 10; i++) {
                String sentence = unigram.generateUnsmoothedUnigramEmails(endMarks);
                fileWriter.write(String.format("%s %d:  %s%n", "Email Number", i + 1, sentence));
                fileWriter.write(String.format("Probability of the email is:   %s%n%n%n", unigram.getProbabilityWithUnsmoothedUnigram(sentence)));
            }
            System.out.printf("10 emails are generated using Unsmoothed Unigram Model. Execution continues...%n%n");

            fileWriter.write(String.format("------------------------ EMAILS THAT ARE GENERATED BY USING SMOOTHED UNIGRAM MODEL  -----------------------%n%n"));
            for (int i = 0; i < 10; i++) {
                String sentence = unigram.generateSmoothedUnigramEmails(endMarks);
                fileWriter.write(String.format("%s %d:  %s%n", "Generated Email Number", i + 1, sentence));
                fileWriter.write(String.format("Probability of the email is:   %s%n%n%n", unigram.getProbabilityWithSmoothedUnigram(sentence)));
            }
            System.out.printf("10 emails are generated using Smoothed Unigram Model. Execution continues...%n%n");

            fileWriter.write(String.format("------------------------ EMAILS THAT ARE GENERATED BY USING UNSMOOTHED BIGRAM MODEL  -----------------------%n%n"));
            for (int i = 0; i < 10; i++) {
                String sentence = bigram.generateUnsmoothedBigramEmails(endMarks);
                fileWriter.write(String.format("%s %d:  %s%n", "Generated Email Number", i + 1, sentence));
                fileWriter.write(String.format("Probability of the email is:   %s%n%n%n", bigram.getProbabilityWithUnsmoothedBigram(sentence)));
            }
            System.out.printf("10 emails are generated using Unsmoothed Bigram Model. Execution continues...%n%n");

            fileWriter.write(String.format("------------------------ EMAILS THAT ARE GENERATED BY USING SMOOTHED BIGRAM MODEL  -----------------------%n%n"));
            for (int i = 0; i < 10; i++) {
                String sentence = bigram.generateSmoothedBigramEmails(endMarks);
                fileWriter.write(String.format("%s %d:  %s%n", "Generated Email Number", i + 1, sentence));
                fileWriter.write(String.format("Probability of the email is:   %s%n%n%n", bigram.getProbabilityWithSmoothedBigram(sentence)));
            }
            System.out.printf("10 emails are generated using Smoothed Bigram Model. Execution continues...%n%n");

            fileWriter.write(String.format("------------------------ EMAILS THAT ARE GENERATED BY USING UNSMOOTHED TRIGRAM MODEL  -----------------------%n%n"));
            for (int i = 0; i < 10; i++) {
                String sentence = trigram.generateUnsmoothedTrigramEmails(endMarks);
                fileWriter.write(String.format("%s %d:  %s%n", "Generated Email Number", i + 1, sentence));
                fileWriter.write(String.format("Probability of the email is:   %s%n%n%n", trigram.getProbabilityWithUnsmoothedTrigram(sentence)));
            }
            System.out.printf("10 emails are generated using Unsmoothed Trigram Model. Execution continues...%n%n");

            fileWriter.write(String.format("------------------------ EMAILS THAT ARE GENERATED BY USING SMOOTHED TRIGRAM MODEL  -----------------------%n%n"));
            for (int i = 0; i < 10; i++) {
                String sentence = trigram.generateSmoothedTrigramEmails(endMarks);
                fileWriter.write(String.format("%s %d:  %s%n", "Generated Email Number", i + 1, sentence));
                fileWriter.write(String.format("Probability of the email is:   %s%n%n%n", trigram.getProbabilityWithSmoothedTrigram(sentence)));
            }
            System.out.printf("10 emails are generated using Smoothed Trigram Model. Execution continues...%n%n");

            fileWriter.write(String.format("----------------------------------------------- TASK-4 RESULTS ----------------------------------------------%n"));
            fileWriter.write(String.format("------------------------------------ PERPLEXITY OF THE EACH EMAIL IN THE TEST SET  -------------------------%n%n"));
            System.out.printf("Generating Task - 4 Results. This may take a while...%n%n");

            for (int i = 0; i < testSet.size(); i++) {
                String email = testSet.get(i);
                fileWriter.write(String.format("%d-  ", i + 1));
                fileWriter.write(String.format("Perplexity of the email using SMOOTHED BIGRAM is:   %s%n%n", bigram.calculatePerplexity(email)));
                fileWriter.write(String.format("Perplexity of the email using SMOOTHED TRIGRAM is:   %s%n%n", trigram.calculatePerplexity(email)));
            }

            System.out.printf("Perplexity of each email is calculated.%n%n");
            System.out.printf("Execution is done. Estimated execution time is: " + (double) (System.nanoTime() - startTime) / 1000000000.0 + " seconds.%n");
            fileWriter.closeFile();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Creates a List that contains sentence ending marks as regex.
     *
     * @param endMarkList
     * @return list of sentence ending marks
     */
    private static List<String> initializeSentenceEndingMarkList(List<String> endMarkList) {
        endMarkList.add("[.]+");
        endMarkList.add("[!]+");
        endMarkList.add("[?]+");

        return endMarkList;
    }

    /**
     * Creates a sentence with sentence boundaries "<s>" and "</s>".
     *
     * @param allTokens all tokens that are in the input file
     * @param endMarkList list of sentence ending marks
     * @return a complete sentence with boundaries
     */
    private static List<String> addSentenceBoundary(List<String> allTokens, List<String> endMarkList) {
        StringJoiner stringJoiner = new StringJoiner(" ");
        List<String> sentences = new ArrayList<>();

        for (String token : allTokens) {
            stringJoiner.add(token);

            for (String endMark : endMarkList) {
                if (Pattern.compile(endMark).matcher(token).find()) {
                    stringJoiner.add(SENTENCE_END_BOUNDARY);
                    sentences.add(SENTENCE_BEGIN_BOUNDARY + " " + stringJoiner.toString().toLowerCase());
                    stringJoiner = new StringJoiner(" ");
                }
            }
        }
        return sentences;
    }
}
